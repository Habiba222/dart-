import 'dart:io';

abstract class Shape {
  getArea();
}

class Circle extends Shape {
// inheretance from shape class
  @override
  getArea() {
    print("Entre the Radius of the circle");
    double rad = double.parse(stdin.readLineSync()!);
    var result1 = (3.14 * rad * rad);
    print("the answer is : $result1");
  }
}

class Rectangler extends Shape {
// inheretance from shape class
  @override
  getArea() {
    print("please Enter the hight of the Rectangle");
    double hight = double.parse(stdin.readLineSync()!);
    print("great ! now Enter the width of the Rectangle");
    double width = double.parse(stdin.readLineSync()!);
    var result2 = (hight * width);
    print("the answer is : $result2");
  }
}

class Triangle extends Shape {
// inheretance from shape class
  @override
  getArea() {
    print("please Enter the the base of the right angled Triangle");
    double base = double.parse(stdin.readLineSync()!);
    print("great now Enter the the hight of the right angled Triangle");
    double hightt = double.parse(stdin.readLineSync()!);
    var result3 = (.5 * base * hightt);
    print("the result is : $result3");
  }
}

class Fill1 extends Circle {
  fillit() {
    print("it's filled shape !");
  }
}

class FilledCircle extends Fill1 {
  defineMe() {
    getArea();
    fillit();
  }
}

class Fill2 extends Rectangler {
  fillit() {
    print("it's filled shape !");
  }
}

class FilledRectangler extends Fill2 {
  defineMe() {
    getArea();
    fillit();
  }
}

class Fill3 extends Triangle {
  fillit() {
    print("it's filled shape !");
  }
}

class FilledTriangle extends Fill3 {
  defineMe() {
    getArea();
    fillit();
  }
}

void main() {
  print(
      "choose which shape to calculate it's Area : for Circle type'1', for Rectangle type'2' and for Triangle type'3'");
  var shapee = stdin.readLineSync();
  if (shapee == "1") {
    var an = FilledCircle();
    an.defineMe();
  } else if (shapee == "2") {
    var en = FilledRectangler();
    en.defineMe();
  } else {
    var don = FilledTriangle();
    don.defineMe();
  }
}
